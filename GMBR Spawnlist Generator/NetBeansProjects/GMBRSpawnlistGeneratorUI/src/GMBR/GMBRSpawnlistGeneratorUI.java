/*
 * Program under Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) license.
 * http://creativecommons.org/licenses/by-nc-sa/4.0/
 */
package GMBR;

import java.awt.Color;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.io.PrintWriter;
import java.net.URISyntaxException;
import java.nio.file.DirectoryNotEmptyException;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
/**
 *
 * GMBR SPAWNLIST GENERATOR
 * @author Xalalau Xubilozo
 * http://gmbrblog.blogspot.com.br/
 * http://mrxalalau.blogspot.com.br/
 * https://github.com/xalalau/GMod/tree/master/GMBR%20Spawnlist%20Generator
 * 22/08/2015 (dd/mm/yyyy)
 * Version 1.1
 * License: MIT
 */
public class GMBRSpawnlistGeneratorUI extends javax.swing.JFrame {

    /**
     * Creates new form GMBRSpawnlistGeneratorUI
     */
    public GMBRSpawnlistGeneratorUI() {
        initComponents();
        jComboBox1.setSelectedItem("EN");
        Image image = null;
        try {
            image = ImageIO.read(getClass().getResource(""));
        } catch (IOException ex) {
            Logger.getLogger(GMBRSpawnlistGeneratorUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        setIconImage(image);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GMBR Spawnlist Generator 1.1");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(232, 232, 232));

        jLabel1.setText("Select a location with addons in folder or gma format:");

        jButton2.setText("...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(232, 232, 232));

        jTextField4.setText("0");

        jLabel5.setText("Parent ID:");

        jTextField3.setText("xX-Cu57om-Xx");

        jLabel3.setText("Name:");

        jLabel6.setText("Icon:");

        jLabel7.setText("ID:");

        jTextField6.setText("34");

        jTextField2.setText("34_my_spawnlist.txt");
        jTextField2.setToolTipText("");

        jLabel2.setText("File name:");

        jTextField5.setText("icon16/page.png");
        jTextField5.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(189, 189, 189))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(230, 230, 230))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(232, 232, 232));

        jCheckBox1.setText("Read gma files");

        jCheckBox4.setSelected(true);
        jCheckBox4.setText("Read legacy addons");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EN", "PT-BR" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel8.setText("Language:");

        jCheckBox2.setText("1 spawnlist per addon");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox4)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox1)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(232, 232, 232));

        jButton1.setText("Generate spawnlist(s)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("...");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Button to start the spawnlist generating.
        // Is something empty or not set?
        boolean value1 = jTextField1.getText().equals("");
        boolean value2 = jTextField2.getText().equals("");
        boolean value3 = jTextField3.getText().equals("");
        boolean value4 = jTextField4.getText().equals("");
        boolean value5 = jTextField5.getText().equals("");
        boolean value6 = jTextField6.getText().equals("");
        if ((value1 || value2 || value3 || value4 || value5 || value6) && (!jCheckBox2.isSelected())) {
            jLabel4.setText(programText[3]);
            jLabel4.setForeground(Color.RED);
        } else {
            if ((!jCheckBox4.isSelected()) && (!jCheckBox1.isSelected())) {
                jLabel4.setText(programText[4]);
                jLabel4.setForeground(Color.RED);
            } else {
                // If everything is OK, start the program
                jLabel4.setText(programText[0]);
                jLabel4.setForeground(Color.BLUE);
                // Wait 1ms before starting the functions, so the initial text can be printed to the gui.
                new java.util.Timer().schedule(new java.util.TimerTask() {
                    @Override
                    public void run() {
                        start(jTextField1.getText(), jTextField2.getText(), jTextField3.getText());
                    }
                }, 1);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Button to get the folder with the addons
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File f = chooser.getSelectedFile();
            if (f != null) {
                jTextField1.setText(f.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // Languages
        programText =  new String[8];
        switch (jComboBox1.getSelectedItem().toString()) {
            case "EN":
                jButton1.setText("Generate spawnlist(s)");
                jLabel8.setText("Language:");
                jCheckBox1.setText("Read gma files");
                jCheckBox2.setText("1 spawnlist per addon");
                jCheckBox4.setText("Read legacy addons");
                jLabel5.setText("Parent ID:");
                jLabel3.setText("Name:");
                jLabel6.setText("Icon:");
                jLabel2.setText("File name:");
                jLabel1.setText("Select a location with addons in folder or gma format:");
                programText[0] = "Generating spawnlist(s)...";
                programText[1] = "DONE (Addons with models: ";
                programText[2] = " | Models: ";
                programText[3] = "Fill all the text fields.";
                programText[4] = "Select the type(s) of addon(s) that will be read.";
                programText[5] = "ERROR! Check the \"";
                programText[6] = "\" file.";
                programText[7] = "Error generating the error file. :)";
                break;
            case "PT-BR":
                jButton1.setText("Gerar spawnlist(s)");
                jLabel8.setText("Linguagem:");
                jCheckBox1.setText("Ler arquivos gma");
                jCheckBox2.setText("1 spawnlist por addon");
                jCheckBox4.setText("Ler pastas de addons");
                jLabel5.setText("ID pai:");
                jLabel3.setText("Nome:");
                jLabel6.setText("Ícone:");
                jLabel2.setText("Arquivo:");
                jLabel1.setText("Selecione um local com addons em formato de pasta ou gma:");
                programText[0] = "Gerando spawnlist(s)...";
                programText[1] = "PRONTO (Addons com modelos: ";
                programText[2] = " | Modelos: ";
                programText[3] = "Preencha todos os campos de texto.";
                programText[4] = "Selecione o(s) tipo(s) de addon(s) que será(ão) lido(s).";
                programText[5] = "ERRO! Cheque o arquivo \"";
                programText[6] = "\".";
                programText[7] = "Erro ao gerar o arquivo de erro. :)";
                break;
        }
        jLabel4.setText("...");
        jLabel4.setForeground(Color.BLACK);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // Enable/Disable some fields when the "1 spawnlist per addon" checkbox is (un)marked
        if (jCheckBox2.isSelected()) {
            Color INACTIVE = new Color(205,205,205);
            jTextField2.setEditable(false);
            jTextField2.setBackground(INACTIVE);
            jTextField3.setEditable(false);
            jTextField3.setBackground(INACTIVE);
            jTextField4.setEditable(false);
            jTextField4.setBackground(INACTIVE);
            jTextField5.setEditable(false);
            jTextField5.setBackground(INACTIVE);
            jTextField6.setEditable(false);
            jTextField6.setBackground(INACTIVE);
        } else {
            Color ACTIVE = new Color(255,255,255);
            jTextField2.setEditable(true);
            jTextField2.setBackground(ACTIVE);
            jTextField3.setEditable(true);
            jTextField3.setBackground(ACTIVE);
            jTextField4.setEditable(true);
            jTextField4.setBackground(ACTIVE);
            jTextField5.setEditable(true);
            jTextField5.setBackground(ACTIVE); 
            jTextField6.setEditable(true); 
            jTextField6.setBackground(ACTIVE); 
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private static final String BAR = "/";
    private static final String GMA_ARRAY = "gma_array.txt";
    private static final String GMA_FILES_ARRAY = "gma_files_array.txt";
    private static final String GMADCONV = "gmadconvx";
    private static final String SPAWNLISTS_FOLDER = "Generated spawnlists";
    private static final String JAVA_ERROR_FILE = "Java_error_report.txt";
    private static final String GMADCONVX_ERROR_FILE = "GMadConvX_error_report.txt";
    private static String SYSBITS;
    private static String OS = System.getProperty("os.name").toLowerCase();
    private static String BAR_READFOLDERS = null;
    private static PrintWriter writer;
    private static int i = 1, headers = 0, models = 0;
    private static String[] programText;
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GMBRSpawnlistGeneratorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GMBRSpawnlistGeneratorUI().setVisible(true);
            }
        });
    }

    public void error(Exception exception, String CURRENT_FOLDER) {
        // Prints the error to a file
        jLabel4.setText(programText[5] + JAVA_ERROR_FILE + programText[6]);
        jLabel4.setForeground(Color.RED);
        
        try {
            PrintStream out_error;
            out_error = new PrintStream(new FileOutputStream(CURRENT_FOLDER + BAR + JAVA_ERROR_FILE));
            exception.printStackTrace(out_error);
            out_error.close();            
        } catch (FileNotFoundException ex) {
            jLabel4.setText(programText[7]);
            jLabel4.setForeground(Color.RED);
        }
    }
    
    public void start(String addonsDir, String listFileName, String listName) {
        // Ger current folder
        String CURRENT_FOLDER = null;
        try {
            File folder = new File(GMBRSpawnlistGeneratorUI.class.getProtectionDomain().getCodeSource().getLocation().toURI().g‌​etPath());
            CURRENT_FOLDER = folder.getParent();
        } catch (URISyntaxException ex) {
            error(ex ,CURRENT_FOLDER );
            return;
        }
        
        // OS definitions
        boolean BITS = false;
        if (OS.indexOf("win") >= 0) {
            OS = "win";
            BAR_READFOLDERS = "\\\\";
            BITS = (System.getenv("ProgramFiles(x86)") != null);
        } else if (OS.indexOf("nix") >= 0 || OS.indexOf("nux") >= 0 || OS.indexOf("aix") > 0 ) {
            OS = "lin";
            BAR_READFOLDERS = "/";
            BITS = (System.getProperty("os.arch").indexOf("64") != -1);
        }
        if (BITS == true){
            SYSBITS = "64";
        } else {
            SYSBITS = "32";
        }
        
        // Create spawnlist(s) folder
        File file = new File(CURRENT_FOLDER + BAR + SPAWNLISTS_FOLDER);
        if (!file.exists()) {
            if (!file.mkdir()) {
                jLabel4.setText(programText[17]);
                jLabel4.setForeground(Color.RED);
                return;
            }
        }
        
        // [Single spawnlis option] Create / open spawnlist file
        if (!jCheckBox2.isSelected()) {
            try {
                writer = new PrintWriter(CURRENT_FOLDER + BAR + SPAWNLISTS_FOLDER + BAR + listFileName, "UTF-8");
            } catch (FileNotFoundException | UnsupportedEncodingException ex) {
                error(ex ,CURRENT_FOLDER );
                return;
            }
        }

        // [Single spawnlis option] Spawnlist - top
        if (!jCheckBox2.isSelected()) {
            writer.println("\"TableToKeyValues\"");
            writer.println("{");
            writer.println("    \"parentid\"        \"" + jTextField4.getText() + "\"");
            writer.println("    \"icon\"        \"" + jTextField5.getText() + "\"");
            writer.println("    \"id\"        \"" + jTextField6.getText() + "\"");
            writer.println("    \"contents\"");
            writer.println("    {");
        }
        
        // [Single spawnlis option] Fills the list middle
        // #### 1 spawnlist per addon - generate multiple full different lists
        if (jCheckBox1.isSelected()) {
            try {
                if(gmaExtract(new File(addonsDir), addonsDir, CURRENT_FOLDER) == 1) { // Make a list with the gma files
                    return;
                }
            } catch (GMadConvXErrorException ex) {
                error(ex ,CURRENT_FOLDER );
                return;
            }
        }

        if (jCheckBox4.isSelected()) {
            if(readFolders(new File(addonsDir), CURRENT_FOLDER) == 1) { // Read folders
                return;
            }
        }
        if (jCheckBox1.isSelected()) {
            if(readGmaFilesArray(CURRENT_FOLDER) == 1) { // Read gma files
                return;
            }
        }
        
        // [Single spawnlis option] Spawnlist - bottom
        if (!jCheckBox2.isSelected()) {
            writer.println("    }");
            writer.println("    \"name\"        \"" + listName +"\"");
            writer.println("    \"version\"        \"3\"");
            writer.println("}");
        }

        // [Single spawnlis option] Close the spawnlist file
        if (!jCheckBox2.isSelected()) {
            writer.close();
        }
        
        // Delete files
        String string = null;
        try {
            // Delete files generated in the gma extracting function
            if (jCheckBox1.isSelected()) {
                string = CURRENT_FOLDER + BAR + GMA_ARRAY;
                Files.delete(Paths.get(string));
                string = CURRENT_FOLDER + BAR + GMA_FILES_ARRAY;
                Files.delete(Paths.get(string));
            }
            // [Single spawnlis option] Delete the spawnlist if it's empty
            if (((jCheckBox4.isSelected()) || (jCheckBox1.isSelected())) && (models == 0)) {
                string = CURRENT_FOLDER + BAR + SPAWNLISTS_FOLDER + BAR + listFileName;
                Files.delete(Paths.get(string));
            }
        } catch (NoSuchFileException ex) {
            error(ex ,CURRENT_FOLDER );
            return;
        } catch (DirectoryNotEmptyException ex) {
            error(ex ,CURRENT_FOLDER );
            return;
        } catch (IOException ex) {
            error(ex ,CURRENT_FOLDER );
            return;
        }

        // Print the results in the program
        jLabel4.setText(programText[1] + headers + programText[2] + models + ")");
        jLabel4.setForeground(Color.BLUE);

        // Reset vars
        headers = 0;
        models = 0;
        i = 0;
    }

    public int gmaExtract(File addonsDir, String addonsDirStr, String CURRENT_FOLDER) throws GMadConvXErrorException {
        File[] files = addonsDir.listFiles();
        String gmaArray = CURRENT_FOLDER + BAR + GMA_ARRAY;
        String errorFile = CURRENT_FOLDER + BAR + GMADCONVX_ERROR_FILE;
        String gmaFilesArray = CURRENT_FOLDER + BAR + GMA_FILES_ARRAY;
        String aux = "", gmadconv = "";
        int k = 0, total = 0;

        // The path for the modified GMadConv
        switch (OS) {
            case "win":
                {
                    gmadconv = CURRENT_FOLDER + BAR + "bin" + BAR + GMADCONV + SYSBITS + ".exe";
                    break;
                }
            case "lin":
                {
                    gmadconv = CURRENT_FOLDER + BAR + "bin" + BAR + GMADCONV + SYSBITS;
                    break;
                }
        }

        jTextField1.setText(gmadconv);
        
        // Generates the gma_array.txt file
        try {
            PrintWriter writer = new PrintWriter(gmaArray, "ISO-8859-1");
            for (File file : files) {
                aux = file.getCanonicalPath();
                if (aux.substring(aux.lastIndexOf('.') + 1).equals("gma")) {
                    writer.println(aux);
                    total++;
                }
            }
            writer.close();
        } catch (NullPointerException | IOException ex) {
            error(ex ,CURRENT_FOLDER );
            return 1;
        }

        // Calls the modified GMadConv, generates the gma_files_array.txt file
        try {
            Process p = Runtime.getRuntime().exec(new String[]{gmadconv, addonsDirStr, gmaArray, gmaFilesArray, errorFile});
            p.waitFor();
            // get the error stream of the process and print it
            InputStream error = p.getErrorStream();
            //p.destroy(); // <-- Windows: OK / Linux: Crash
            if(error.available() == 1) {
                throw new GMadConvXErrorException();
            }
        } catch (IOException | InterruptedException ex) {
            error(ex ,CURRENT_FOLDER );
            return 1;
        }
        
        return 0;
    }

    public int readGmaFilesArray(String CURRENT_FOLDER) {
        String gmaFilesArray = CURRENT_FOLDER + BAR + GMA_FILES_ARRAY;
        String nomeArqOptMultipleSapwnlists = null,  name = null, nameAux = "";
        BufferedReader br = null;
        int lib = 0;

        try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader(gmaFilesArray));
            while ((sCurrentLine = br.readLine()) != null) {
                String[] array = {""};
                lib = 0;
                String folder = null;
                // The file path is splited on "/"s
                array = sCurrentLine.split(BAR, -1);
                // Search for "models" folder
                try {
                    for (int j = 0; j<array.length; j++) {
                        if (lib == 0) {
                            if (array[j].equals("models")) {
                                lib = 1;
                                name = array[j-1]; // Get the name of the addon
                                if (name.equals("materials"))
                                    name = nameAux;
                                folder = array[j];
                            }
                        // If "models" folder is found, get the file path from "models" to the file
                        } else {
                            folder = folder + BAR + array[j];
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException ex) {
                    error(ex ,CURRENT_FOLDER );
                    return 1;
                }
                if (lib == 1) {
                    // If the file extension is "mdl", go
                    if (folder.substring(folder.lastIndexOf('.') + 1).equals("mdl")) {
                        // If there is a header to print, go, else, just print the model
                        if (!nameAux.equals(name)) {
                            // #### 1 spawnlist per addon option
                            if (jCheckBox2.isSelected()) {
                                if (writer != null) {
                                    // #### 1 spawnlist per addon option - Bottom
                                    writer.println("    }");
                                    writer.println("    \"name\"        \"" + nameAux +"\"");
                                    writer.println("    \"version\"        \"3\"");
                                    writer.println("}");

                                    // #### 1 spawnlist per addon option - If the writer is open, close it
                                    writer.close();
                                }

                                nomeArqOptMultipleSapwnlists = String.format("%03d", headers + 35) + "_" + name.replaceAll("[^A-Za-z0-9 ]", "").replaceAll("\\s","_") + ".txt";

                                // #### 1 spawnlist per addon option - Create the writer / spawnlists
                                writer = new PrintWriter(CURRENT_FOLDER + BAR + SPAWNLISTS_FOLDER + BAR + nomeArqOptMultipleSapwnlists , "UTF-8");
                                i = 1;

                                //  #### 1 spawnlist per addon option - Index the header if it's needed
                                writer.println("\"TableToKeyValues\"");
                                writer.println("{");
                                writer.println("    \"parentid\"        \"0\"");
                                writer.println("    \"icon\"        \"icon16/page.png\"");
                                writer.println("    \"id\"        \"" + (headers + 35) + "\"");
                                writer.println("    \"contents\"");
                                writer.println("    {");
                            // 1 spawnlist for all addons option
                            }
                            // Print the header
                            writer.println("        \"" + i + "\"");
                            writer.println("        {");
                            writer.println("            \"type\"        \"header\"");
                            writer.println("            \"text\"        \"" + name + "\"");
                            writer.println("        }");
                            headers++;
                            i++;
                            nameAux = name;
                        }
                        // Print the model
                        writer.println("        \"" + i + "\"");
                        writer.println("        {");
                        writer.println("            \"type\"        \"model\"");
                        writer.println("            \"model\"       \"" + folder + "\"");
                        writer.println("            \"tall\"        \"64\"");
                        writer.println("        }");
                        models++;
                        i++;
                    }
                }
            }
            // #### 1 spawnlist per addon option - Bottom for the last gma
            if (jCheckBox2.isSelected()) {
                writer.println("    }");
                writer.println("    \"name\"        \"" + name +"\"");
                writer.println("    \"version\"        \"3\"");
                writer.println("}");
                writer.close();
            }
            br.close();
        } catch (IOException ex) {
            error(ex ,CURRENT_FOLDER );
            return 1;
        } finally {
            try {
                if (br != null)
                    br.close();
            } catch (IOException ex) {
                error(ex ,CURRENT_FOLDER );
                return 1;
            }
        }
        
        return 0;
    }
    
    public int readFolders(File dir, String CURRENT_FOLDER) {
        // Recursively search the directories for models and generate the spawnlist
        File[] files = dir.listFiles();
        String nomeArqOptMultipleSapwnlists = null, name = null, nameAux = "";
        
        try {
            for (File file : files) {
                // "File" is a directory? Recursion.
                if (file.isDirectory()) {
                    readFolders(file, CURRENT_FOLDER);
                // "File" is a file? Go.
                } else {
                    String[] array = {""};
                    int lib = 0;
                    String folder = null;
                    // The file path is splited on "/"s
                    try {
                        array = file.getCanonicalPath().split(BAR_READFOLDERS, -1);
                    } catch (IOException ex) {
                        error(ex ,CURRENT_FOLDER );
                        return 1;
                    }
                    for (int j = 0; j<array.length; j++) {
                        // Search for "models" folder
                        if (lib == 0) {
                            if (array[j].equals("models")) {
                                lib = 1;
                                name = array[j-1]; // Get the name of the addon
                                if (name.equals("materials"))
                                    name = nameAux;
                                folder = array[j];
                            }
                        }
                        // If "models" folder is found, get the file path from "models" to the file
                        else {
                            folder = folder + BAR + array[j];
                        }
                    }
                    if (lib == 1) {
                        // If the file extension is "mdl", go
                        if (folder.substring(folder.lastIndexOf('.') + 1).equals("mdl")) {
                            // If there is a header to print, go, else, just print the model
                            if (!nameAux.equals(name)) {
                                // #### 1 spawnlist per addon option
                                if (jCheckBox2.isSelected()) {
                                    if (writer != null) {
                                        // #### 1 spawnlist per addon option - Bottom
                                        writer.println("    }");
                                        writer.println("    \"name\"        \"" + nameAux +"\"");
                                        writer.println("    \"version\"        \"3\"");
                                        writer.println("}");
                                            
                                        // #### 1 spawnlist per addon option - If the writer is open, close it
                                        writer.close();
                                    }

                                    nomeArqOptMultipleSapwnlists = String.format("%03d", headers + 35) + "_" + name.replaceAll("[^A-Za-z0-9 ]", "").replaceAll("\\s","_") + ".txt";

                                    // #### 1 spawnlist per addon option - Create the writer / spawnlists
                                    writer = new PrintWriter(CURRENT_FOLDER + BAR + SPAWNLISTS_FOLDER + BAR + nomeArqOptMultipleSapwnlists , "UTF-8");
                                    i = 1;
                                    
                                    //  #### 1 spawnlist per addon option - Index the header if it's needed
                                    writer.println("\"TableToKeyValues\"");
                                    writer.println("{");
                                    writer.println("    \"parentid\"        \"0\"");
                                    writer.println("    \"icon\"        \"icon16/page.png\"");
                                    writer.println("    \"id\"        \"" + (headers + 35) + "\"");
                                    writer.println("    \"contents\"");
                                    writer.println("    {");
                                // 1 spawnlist for all addons option
                                }
                                // Print the header
                                writer.println("        \"" + i + "\"");
                                writer.println("        {");
                                writer.println("            \"type\"        \"header\"");
                                writer.println("            \"text\"        \"" + name + "\"");
                                writer.println("        }");
                                headers++;
                                i++;
                                nameAux = name;
                            }
                            // Print the model
                            writer.println("        \"" + i + "\"");
                            writer.println("        {");
                            writer.println("            \"type\"        \"model\"");
                            writer.println("            \"model\"       \"" + folder + "\"");
                            writer.println("            \"tall\"        \"64\"");
                            writer.println("        }");
                            models++;
                            i++;
                        }
                    }
                }
            }
            // #### 1 spawnlist per addon option - Bottom for the last gma
            if (jCheckBox2.isSelected()) {
                writer.println("    }");
                writer.println("    \"name\"        \"" + name +"\"");
                writer.println("    \"version\"        \"3\"");
                writer.println("}");
                writer.close();
            }
        } catch (NullPointerException | FileNotFoundException | UnsupportedEncodingException ex) {
            error(ex ,CURRENT_FOLDER );
            return 1;
        }
        
        return 0;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables
}
